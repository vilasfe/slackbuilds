This is the proprietary binary video driver from NVidia for the X.Org
X-server. This package does not include the kernel-module - it is a part
of the nvidia-kernel package at SlackBuilds.org.

NOTE: 64-bit x86_64 support ONLY for Slackware64. For x86 32-bit
support, use nvidia-legacy390-{driver,kernel}

Installing the 32-bit compatibility libraries is available: if desired,
do:
  COMPAT32="yes" ./nvidia-driver.SlackBuild
  
If you plan to test this buildscript on current (15.0 EXPERIMENTAL), to
avoid stomping on the installed libglvnd, do:
  CURRENT="yes" ./nvidia-driver.SlackBuild

This script now gives the option of installing the nvidia-persitenced
daemon.  For details, see README.nvidia-persitenced.

Several useful utilities are included: nvidia-xsettings, nvidia-smi, and
nvidia-settings.  Please refer to the Nvidia documentation and man pages
for details and usage.

For CUDA/OpenCL to work after reboot, and for utilites such as
nvidia-smi, you might need to include the following line in your
/etc/rc.d/rc.local: (This is required if you plan on running
nvidia-persistenced)

    # Create missing nvidia device nodes after reboot
    /usr/bin/nvidia-modprobe -c 0 -u

Notes:
1.  You still need to blacklist the open source nouveau driver. This is
    easily done by installing xf86-video-nouveau-blacklist in
    extra/xf86-video-nouveau-blacklist on the distibution DVD.

2.  If nvidia-driver is already installed, the script will abort with a
    prompt to remove the existing driver (it is not necessary to remove
    the kernel module).

3.  On 14.2 ONLY, if you want to revert back to the open source drivers,
    run 'nvidia-switch --remove' to restore the original libGL.la and
    then 'removepkg nvidia-driver' "should" work in most cases. If not,
    just go into /usr/lib64 (as root of course) and rename libGL.la-xorg
    to libGL.la.  (THIS STEP IS NO LONGER NECESSARY ON CURRENT.)
